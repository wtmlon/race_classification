nohup: ignoring input
DataParallel(
  (module): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Linear(in_features=512, out_features=3, bias=True)
  )
)
['BLACK', 'WHITE', 'YELLOW']
Epoch 0/29
----------
 train Loss: 0.9548 Acc: 0.5419
 val Loss: 0.9064 Acc: 0.5353

Epoch 1/29
----------
 train Loss: 0.6728 Acc: 0.7146
 val Loss: 0.6725 Acc: 0.7123

Epoch 2/29
----------
 train Loss: 0.4462 Acc: 0.8253
 val Loss: 0.7523 Acc: 0.7076

Epoch 3/29
----------
 train Loss: 0.3386 Acc: 0.8680
 val Loss: 0.2947 Acc: 0.8855

Epoch 4/29
----------
 train Loss: 0.2716 Acc: 0.8950
 val Loss: 0.4469 Acc: 0.8333

Epoch 5/29
----------
 train Loss: 0.2287 Acc: 0.9116
 val Loss: 0.3154 Acc: 0.8838

Epoch 6/29
----------
 train Loss: 0.1886 Acc: 0.9282
 val Loss: 0.5341 Acc: 0.8015

Epoch 7/29
----------
 train Loss: 0.1502 Acc: 0.9456
 val Loss: 0.4198 Acc: 0.8554

Epoch 8/29
----------
 train Loss: 0.1134 Acc: 0.9615
 val Loss: 0.2219 Acc: 0.9199

Epoch 9/29
----------
 train Loss: 0.0701 Acc: 0.9822
 val Loss: 0.2396 Acc: 0.9150

Epoch 10/29
----------
 train Loss: 0.0614 Acc: 0.9858
 val Loss: 0.2457 Acc: 0.9108

Epoch 11/29
----------
 train Loss: 0.0565 Acc: 0.9875
 val Loss: 0.2318 Acc: 0.9184

Epoch 12/29
----------
 train Loss: 0.0541 Acc: 0.9892
 val Loss: 0.2337 Acc: 0.9137

Epoch 13/29
----------
 train Loss: 0.0504 Acc: 0.9909
 val Loss: 0.2885 Acc: 0.8998

Epoch 14/29
----------
 train Loss: 0.0473 Acc: 0.9915
 val Loss: 0.2734 Acc: 0.9049

Epoch 15/29
----------
 train Loss: 0.0450 Acc: 0.9925
 val Loss: 0.2515 Acc: 0.9118

Epoch 16/29
----------
 train Loss: 0.0421 Acc: 0.9932
 val Loss: 0.2479 Acc: 0.9135

Epoch 17/29
----------
 train Loss: 0.0409 Acc: 0.9939
 val Loss: 0.2368 Acc: 0.9157

Epoch 18/29
----------
 train Loss: 0.0381 Acc: 0.9948
 val Loss: 0.2776 Acc: 0.9042

Epoch 19/29
----------
 train Loss: 0.0381 Acc: 0.9944
 val Loss: 0.2469 Acc: 0.9118

Epoch 20/29
----------
 train Loss: 0.0376 Acc: 0.9945
 val Loss: 0.2602 Acc: 0.9093

Epoch 21/29
----------
 train Loss: 0.0370 Acc: 0.9952
 val Loss: 0.2451 Acc: 0.9140

Epoch 22/29
----------
 train Loss: 0.0368 Acc: 0.9945
 val Loss: 0.2531 Acc: 0.9115

Epoch 23/29
----------
 train Loss: 0.0367 Acc: 0.9948
 val Loss: 0.2656 Acc: 0.9071

Epoch 24/29
----------
 train Loss: 0.0385 Acc: 0.9937
 val Loss: 0.2405 Acc: 0.9147

Epoch 25/29
----------
 train Loss: 0.0353 Acc: 0.9955
 val Loss: 0.2455 Acc: 0.9140

Epoch 26/29
----------
 train Loss: 0.0367 Acc: 0.9948
 val Loss: 0.2420 Acc: 0.9150

Epoch 27/29
----------
 train Loss: 0.0365 Acc: 0.9952
 val Loss: 0.2460 Acc: 0.9132

Epoch 28/29
----------
 train Loss: 0.0363 Acc: 0.9943
 val Loss: 0.2573 Acc: 0.9093

Epoch 29/29
----------
 train Loss: 0.0373 Acc: 0.9953
 val Loss: 0.2479 Acc: 0.9125

Train complete in 18m 11s
Best val Acc: 0.919853
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).
Exception ignored in: <bound method _DataLoaderIter.__del__ of <torch.utils.data.dataloader._DataLoaderIter object at 0x7fba70eb1d68>>
Traceback (most recent call last):
  File "/home/liuting/.local/lib/python3.5/site-packages/torch/utils/data/dataloader.py", line 399, in __del__
    self._shutdown_workers()
  File "/home/liuting/.local/lib/python3.5/site-packages/torch/utils/data/dataloader.py", line 378, in _shutdown_workers
    self.worker_result_queue.get()
  File "/usr/lib/python3.5/multiprocessing/queues.py", line 345, in get
    return ForkingPickler.loads(res)
  File "/home/liuting/.local/lib/python3.5/site-packages/torch/multiprocessing/reductions.py", line 151, in rebuild_storage_fd
    fd = df.detach()
  File "/usr/lib/python3.5/multiprocessing/resource_sharer.py", line 57, in detach
    with _resource_sharer.get_connection(self._id) as conn:
  File "/usr/lib/python3.5/multiprocessing/resource_sharer.py", line 87, in get_connection
    c = Client(address, authkey=process.current_process().authkey)
  File "/usr/lib/python3.5/multiprocessing/connection.py", line 493, in Client
    answer_challenge(c, authkey)
  File "/usr/lib/python3.5/multiprocessing/connection.py", line 737, in answer_challenge
    response = connection.recv_bytes(256)        # reject large message
  File "/usr/lib/python3.5/multiprocessing/connection.py", line 216, in recv_bytes
    buf = self._recv_bytes(maxlength)
  File "/usr/lib/python3.5/multiprocessing/connection.py", line 407, in _recv_bytes
    buf = self._recv(4)
  File "/usr/lib/python3.5/multiprocessing/connection.py", line 379, in _recv
    chunk = read(handle, remaining)
ConnectionResetError: [Errno 104] Connection reset by peer
